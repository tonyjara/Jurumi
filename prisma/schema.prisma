//generates types based on schema, useful for reference. Do not commit.

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = true
  imports               = null
  prismaJsonNullability = true
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Tips
// To add new fields, first add them as optionsl next to the type, ex: String?. Then add the missing fields from studio then take the ? out and re run the migration.
// use a .env to store everything, prisma doesn't like the .env.local

model Account {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  email       String    @unique
  displayName String    @unique
  password    String
  role        Role      @default(USER)

  profile Profile?

  disbursements Disbursement[]
}

model Profile {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  avatarUrl String
  account   Account   @relation(fields: [accountId], references: [id])
  accountId String    @unique
}

// Users added here can see all projects
model Organization {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  createdById String
  updatedById String?
  displayName String    @unique

  MoneyAccounts MoneyAccount[]
  projects      Project[]

  allowedUsers String[]
  archived     Boolean  @default(false)
  softDeleted  Boolean  @default(false)
}

//USERS are not allowed access
model MoneyAccount {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  createdById   String
  updatedById   String?
  displayName   String
  isCashAccount Boolean // Used to create a petty cash account.

  currency       Currency @default(PYG)
  initialBalance Decimal  @default(0) @db.Decimal(19, 4)

  disbursement Disbursement[]
  imbursements Imbursement[]
  organization Organization[]
  // moneyExchangeFrom MoneyTransferOperation[] @relation("exchangeFrom")
  // moneyExchangeTo   MoneyTransferOperation[] @relation("exchangeTo")

  archived    Boolean @default(false)
  softDeleted Boolean @default(false)

  bankInfo     BankInfo?
  Transactions Transactions[]
}

model BankInfo {
  bankName           BankNamesPy
  accountNumber      String          @unique
  ownerName          String
  ownerDocType       BankDocType     @default(RUC)
  ownerDoc           String
  ownerContactNumber String?
  country            String
  city               String
  type               BankAccountType @default(SAVINGS)

  moneyAccountId String       @unique
  moneyAccount   MoneyAccount @relation(fields: [moneyAccountId], references: [id], onDelete: Cascade)

  @@unique([bankName, accountNumber])
}

model Project {
  id                    String    @id @default(cuid())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime? @updatedAt
  createdById           String
  updatedById           String?
  displayName           String    @unique
  assignedMoney         Decimal   @default(0) @db.Decimal(19, 4)
  assignedMoneyCurrency Currency

  disbursements Disbursement[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  allowedUsers String[]
  archived     Boolean  @default(false)
  softDeleted  Boolean  @default(false)
}

model Imbursement {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  createdById String
  updatedById String?
  concept     String    @unique
  currency    Currency  @default(PYG)
  amount      Decimal   @default(0) @db.Decimal(12, 4)

  moneyAccountId String
  moneyAccount   MoneyAccount @relation(fields: [moneyAccountId], references: [id])
  taxPayerId     String
  taxPayer       TaxPayer     @relation(fields: [taxPayerId], references: [id])

  allowedUsers String[]
  archived     Boolean  @default(false)
  softDeleted  Boolean  @default(false)
}

model TaxPayer {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  createdById   String
  updatedById   String?
  razonSocial   String         @unique
  ruc           String         @unique
  fantasyName   String?
  disbursements Disbursement[]
  imbursements  Imbursement[]

  archived    Boolean @default(false)
  softDeleted Boolean @default(false)
}

model Disbursement {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  createdById      String
  updatedById      String?
  description      String
  scannedText      String //Scanned text from OCR API
  pictureUrl       String // Url from blob storage
  facturaNumber    String
  status           DisbursementStatus
  disbursementType DisbursementType

  currency Currency
  amount   Decimal  @default(0) @db.Decimal(12, 4)

  accountId  String
  account    Account       @relation(fields: [accountId], references: [id])
  taxPayerId String?
  taxPayer   TaxPayer?     @relation(fields: [taxPayerId], references: [id])
  bankId     String?
  bank       MoneyAccount? @relation(fields: [bankId], references: [id])
  projectId  String?
  project    Project?      @relation(fields: [projectId], references: [id])

  archived    Boolean @default(false)
  softDeleted Boolean @default(false)

  transactions Transactions[]

  @@unique([taxPayerId, facturaNumber])
}

model Transactions {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt
  createdById       String
  updatedById       String?
  currency          Currency
  openingBalance    Decimal       @default(0) @db.Decimal(12, 4)
  transactionAmount Decimal       @default(0) @db.Decimal(12, 4)
  moneyAccountId    String
  moneyAccount      MoneyAccount  @relation(fields: [moneyAccountId], references: [id])
  Disbursement      Disbursement? @relation(fields: [disbursementId], references: [id])
  disbursementId    String?
}

enum Role {
  ADMIN // full access to crud and testing/seed
  MODERATOR
  // can create everything but not hard delete. 
  // Can change status.
  USER
  // Has to be specificly assigned to read or write.
  // Can't see any amount of money left.
  // Cannot change status.
}

enum BankAccountType {
  SAVINGS
  CURRENT
}

enum BankNamesPy {
  ITAU
  BANCO_GNB
  BANCO_CONTINENTAL
  BANCO_ATLAS
  BANCO_REGIONAL
  BANCO_FAMILIAR
  VISION_BANCO
  BANCO_NACIONAL_DE_FOMENTO
  SUDAMERIS
  BANCO_BASA
  INTERFISA_BANCO
  BANCOP
  BANCO_RIO
  CITIBANK
  BANCO_DO_BRASIL
  BANCO_DE_LA_NACION_ARGENTINA
}

enum BankDocType {
  CI
  CRC
  PASSPORT
  RUC
}

enum Currency {
  USD
  PYG
}

enum DisbursementStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum DisbursementType {
  ADVANCE
  MONEY_ORDER
  REIMBURSMENT_ORDER
}
