generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String                     @id @default(cuid())
  active                   Boolean                    @default(true)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime?                  @updatedAt
  email                    String                     @unique
  displayName              String                     @unique
  password                 String
  role                     Role                       @default(USER)
  isVerified               Boolean                    @default(false)
  accountVerificationLinks AccountVerificationLinks[]
  expenseReports           ExpenseReport[]
  moneyRequests            MoneyRequest[]
  moneyApprovals           MoneyRequestApproval[]
  preferences              Preferences?
  profile                  Profile?
  transactions             Transaction[]
  searchableImage          searchableImage[]
  allowedOnProjects        Project[]                  @relation("AccountToProject")
  organizations            Organization[]             @relation("members")
  moneyAdminOrgs           Organization[]             @relation("moneyAdministrators")
  moneyApproverOrgs        Organization[]             @relation("moneyRequestApprovers")
  Imbursement              Imbursement[]
}

model Profile {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  avatarUrl String
  accountId String    @unique
  account   Account   @relation(fields: [accountId], references: [id])
}

model Preferences {
  id                   String    @id @default(cuid())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime? @updatedAt
  accountId            String    @unique
  selectedOrganization String
  account              Account   @relation(fields: [accountId], references: [id])
}

model AccountVerificationLinks {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  createdById      String
  verificationLink String
  email            String
  hasBeenUsed      Boolean  @default(false)
  accountId        String
  account          Account  @relation(fields: [accountId], references: [id])
}

model Organization {
  id                    String         @id @default(cuid())
  createdAt             DateTime       @default(now())
  updatedAt             DateTime?      @updatedAt
  createdById           String
  updatedById           String?
  displayName           String         @unique
  archived              Boolean        @default(false)
  softDeleted           Boolean        @default(false)
  moneyRequests         MoneyRequest[]
  projects              Project[]
  moneyAccounts         MoneyAccount[] @relation("MoneyAccountToOrganization")
  members               Account[]      @relation("members")
  moneyAdministrators   Account[]      @relation("moneyAdministrators")
  moneyRequestApprovers Account[]      @relation("moneyRequestApprovers")
}

model MoneyAccount {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime?      @updatedAt
  createdById    String
  updatedById    String?
  displayName    String
  isCashAccount  Boolean
  currency       Currency       @default(PYG)
  initialBalance Decimal        @default(0) @db.Decimal(19, 4)
  archived       Boolean        @default(false)
  softDeleted    Boolean        @default(false)
  bankInfo       BankInfo?
  imbursements   Imbursement[]
  transactions   Transaction[]
  organization   Organization[] @relation("MoneyAccountToOrganization")
}

model BankInfo {
  bankName           BankNamesPy
  accountNumber      String          @unique
  ownerName          String
  ownerDocType       BankDocType     @default(RUC)
  ownerDoc           String
  ownerContactNumber String?
  country            String
  city               String
  type               BankAccountType @default(SAVINGS)
  moneyAccountId     String          @unique
  moneyAccount       MoneyAccount    @relation(fields: [moneyAccountId], references: [id], onDelete: Cascade)

  @@unique([bankName, accountNumber])
}

model Project {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  createdById String
  endDate     DateTime?
  updatedById String?
  displayName String      @unique
  description String
  archived    Boolean     @default(false)
  softDeleted Boolean     @default(false)
  projectType ProjectType @default(SUBSIDY)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  costCategories CostCategory[]
  expenseReports ExpenseReport[]
  imbursement    Imbursement[]
  moneyRequest   MoneyRequest[]

  allowedUsers Account[]  @relation("AccountToProject")
  TaxPayer     TaxPayer[] @relation("ProjectToTaxPayer")
}

model CostCategory {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  createdById    String
  updatedById    String?
  displayName    String
  currency       Currency
  projectId      String?
  openingBalance Decimal         @default(0) @db.Decimal(19, 4)
  project        Project?        @relation(fields: [projectId], references: [id])
  expenseReports ExpenseReport[]
  moneyRequests  MoneyRequest[]
}

model Imbursement {
  id                          String    @id @default(cuid())
  wasCancelled                Boolean   @default(false)
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime? @updatedAt
  updatedById                 String?
  concept                     String
  wasConvertedToOtherCurrency Boolean   @default(false)
  exchangeRate                Float
  otherCurrency               Currency
  finalCurrency               Currency  @default(PYG)
  amountInOtherCurrency       Decimal   @default(0) @db.Decimal(19, 4)
  finalAmount                 Decimal   @default(0) @db.Decimal(19, 4)
  archived                    Boolean   @default(false)
  softDeleted                 Boolean   @default(false)

  imbursementProofId String?          @unique
  imbursementProof   searchableImage? @relation("imbursementProof", fields: [imbursementProofId], references: [id])

  invoiceFromOrgId String?          @unique
  invoiceFromOrg   searchableImage? @relation("invoiceFromOrg", fields: [invoiceFromOrgId], references: [id])

  accountId      String
  account        Account       @relation(fields: [accountId], references: [id])
  moneyAccountId String?
  moneyAccount   MoneyAccount? @relation(fields: [moneyAccountId], references: [id])
  projectId      String?
  project        Project?      @relation(fields: [projectId], references: [id])

  taxPayerId  String
  taxPayer    TaxPayer      @relation(fields: [taxPayerId], references: [id])
  transaction Transaction[]
}

model TaxPayer {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  createdById   String
  updatedById   String?
  razonSocial   String          @unique
  ruc           String          @unique
  fantasyName   String?
  archived      Boolean         @default(false)
  softDeleted   Boolean         @default(false)
  expenseReport ExpenseReport[]
  imbursements  Imbursement[]
  project       Project[]       @relation("ProjectToTaxPayer")
}

model MoneyRequestApproval {
  id             String                      @id @default(cuid())
  createdAt      DateTime                    @default(now())
  updatedAt      DateTime?                   @updatedAt
  status         MoneyResquestApprovalStatus
  rejectMessage  String
  accountId      String
  moneyRequestId String
  account        Account                     @relation(fields: [accountId], references: [id])
  moneyRequest   MoneyRequest                @relation(fields: [moneyRequestId], references: [id])
}

model MoneyRequest {
  id                    String                 @id @default(cuid())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime?              @updatedAt
  description           String
  status                MoneyRequestStatus
  moneyRequestType      MoneyRequestType
  currency              Currency
  amountRequested       Decimal                @default(0) @db.Decimal(19, 4)
  rejectionMessage      String
  archived              Boolean                @default(false)
  softDeleted           Boolean                @default(false)
  expenseReports        ExpenseReport[]
  expenseReturns        ExpenseReturn[]
  accountId             String
  account               Account                @relation(fields: [accountId], references: [id])
  costCategoryId        String?
  costCategory          CostCategory?          @relation(fields: [costCategoryId], references: [id])
  organizationId        String
  organization          Organization           @relation(fields: [organizationId], references: [id])
  projectId             String?
  project               Project?               @relation(fields: [projectId], references: [id])
  moneyRequestApprovals MoneyRequestApproval[]
  transactions          Transaction[]
}

model ExpenseReport {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  facturaNumber String
  amountSpent   Decimal   @default(0) @db.Decimal(19, 4)
  currency      Currency
  comments      String

  accountId       String
  account         Account          @relation(fields: [accountId], references: [id])
  costCategoryId  String?
  costCategory    CostCategory?    @relation(fields: [costCategoryId], references: [id])
  moneyRequestId  String
  moneyRequest    MoneyRequest     @relation(fields: [moneyRequestId], references: [id])
  projectId       String?
  project         Project?         @relation(fields: [projectId], references: [id])
  taxPayerId      String
  taxPayer        TaxPayer         @relation(fields: [taxPayerId], references: [id])
  searchableImage searchableImage?

  @@unique([taxPayerId, facturaNumber])
}

model ExpenseReturn {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  amountReturned  Decimal          @default(0) @db.Decimal(19, 4)
  moneyRequestId  String
  moneyRequest    MoneyRequest     @relation(fields: [moneyRequestId], references: [id])
  transactions    Transaction[]
  searchableImage searchableImage?
}

//A transaction can be linked to a moneyAccount or to a CostCategory, everytime a transaction history is required it needs specific transactions
model Transaction {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  updatedById       String?
  currency          Currency
  openingBalance    Decimal   @default(0) @db.Decimal(19, 4)
  currentBalance    Decimal   @default(0) @db.Decimal(19, 4)
  transactionAmount Decimal   @default(0) @db.Decimal(19, 4)
  isCancellation    Boolean   @default(false)

  accountId       String
  account         Account        @relation(fields: [accountId], references: [id])
  cancellationId  Int?           @unique
  cancellation    Transaction?   @relation("cancellation", fields: [cancellationId], references: [id])
  transactions    Transaction?   @relation("cancellation")
  expenseReturnId String?
  expenseReturn   ExpenseReturn? @relation(fields: [expenseReturnId], references: [id])
  imbursementId   String?
  imbursement     Imbursement?   @relation(fields: [imbursementId], references: [id])
  moneyAccountId  String
  moneyAccount    MoneyAccount   @relation(fields: [moneyAccountId], references: [id])
  moneyRequestId  String?
  moneyRequest    MoneyRequest?  @relation(fields: [moneyRequestId], references: [id])

  searchableImage searchableImage?
}

model searchableImage {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime?      @updatedAt
  url             String
  text            String
  imageName       String         @unique
  accountId       String?
  imbursementId   String?        @unique
  expenseReportId String?        @unique
  expenseReturnId String?        @unique
  transactionId   Int?           @unique
  accounts        Account?       @relation(fields: [accountId], references: [id])
  expenseReport   ExpenseReport? @relation(fields: [expenseReportId], references: [id])
  expenseReturn   ExpenseReturn? @relation(fields: [expenseReturnId], references: [id])
  transaction     Transaction?   @relation(fields: [transactionId], references: [id])

  invoicesFromOrgs  Imbursement? @relation("invoiceFromOrg")
  imbursementProofs Imbursement? @relation("imbursementProof")
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum BankAccountType {
  SAVINGS
  CURRENT
}

enum BankNamesPy {
  ITAU
  BANCO_GNB
  BANCO_CONTINENTAL
  BANCO_ATLAS
  BANCO_REGIONAL
  BANCO_FAMILIAR
  VISION_BANCO
  BANCO_NACIONAL_DE_FOMENTO
  SUDAMERIS
  BANCO_BASA
  INTERFISA_BANCO
  BANCOP
  BANCO_RIO
  CITIBANK
  BANCO_DO_BRASIL
  BANCO_DE_LA_NACION_ARGENTINA
}

enum BankDocType {
  CI
  CRC
  PASSPORT
  RUC
}

enum ProjectType {
  SUBSIDY
  CONSULTING
}

enum Currency {
  USD
  PYG
}

enum MoneyRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MoneyRequestType {
  FUND_REQUEST
  MONEY_ORDER
  REIMBURSMENT_ORDER
}

enum MoneyResquestApprovalStatus {
  PENDING
  ACCEPTED
  REJECTED
}
