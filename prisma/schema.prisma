//generates types based on schema, useful for reference. Do not commit.

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = true
  imports               = null
  prismaJsonNullability = true
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id          String    @id @default(cuid())
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  email       String    @unique
  displayName String    @unique
  password    String
  role        Role      @default(USER)
  isVerified  Boolean   @default(false)

  profile     Profile?
  preferences Preferences?

  moneyRequests            MoneyRequest[]
  moneyApprovals           MoneyRequestApproval[]
  accountVerificationLinks AccountVerificationLinks[]
  transactions             Transaction[]
  searchableImages         searchableImage[]

  organizations     Organization[] @relation("members")
  moneyApproverOrgs Organization[] @relation("moneyRequestApprovers")
  moneyAdminOrgs    Organization[] @relation("moneyAdministrators")
  allowedOnProjects Project[]
}

model Profile {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  avatarUrl String
  account   Account   @relation(fields: [accountId], references: [id])
  accountId String    @unique
}

model Preferences {
  id                   String    @id @default(cuid())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime? @updatedAt
  account              Account   @relation(fields: [accountId], references: [id])
  accountId            String    @unique
  selectedOrganization String
}

model AccountVerificationLinks {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  createdById      String
  account          Account  @relation(fields: [accountId], references: [id])
  accountId        String
  verificationLink String
  email            String
  hasBeenUsed      Boolean  @default(false)
}

// Users added here can see all projects
model Organization {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  createdById String
  updatedById String?
  displayName String    @unique

  moneyAccounts MoneyAccount[]
  moneyRequests MoneyRequest[]
  projects      Project[]

  members               Account[] @relation("members") //All accounts need to be member of the organization.
  moneyRequestApprovers Account[] @relation("moneyRequestApprovers") //All money requests need to be approved by this users.
  moneyAdministrators   Account[] @relation("moneyAdministrators") //All money requests are executed by this users, the also get notified.
  archived              Boolean   @default(false)
  softDeleted           Boolean   @default(false)
}

//USERS are not allowed access
model MoneyAccount {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  createdById   String
  updatedById   String?
  displayName   String
  isCashAccount Boolean // Used to create a petty cash account.

  currency       Currency @default(PYG)
  initialBalance Decimal  @default(0) @db.Decimal(19, 4)

  imbursements Imbursement[]
  organization Organization[]

  archived    Boolean @default(false)
  softDeleted Boolean @default(false)

  bankInfo     BankInfo?
  transactions Transaction[]
}

model BankInfo {
  bankName           BankNamesPy
  accountNumber      String          @unique
  ownerName          String
  ownerDocType       BankDocType     @default(RUC)
  ownerDoc           String
  ownerContactNumber String?
  country            String
  city               String
  type               BankAccountType @default(SAVINGS)

  moneyAccountId String       @unique
  moneyAccount   MoneyAccount @relation(fields: [moneyAccountId], references: [id], onDelete: Cascade)

  @@unique([bankName, accountNumber])
}

model Project {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  createdById  String
  updatedById  String?
  displayName  String    @unique
  description  String
  archived     Boolean   @default(false)
  softDeleted  Boolean   @default(false)
  allowedUsers Account[] // account with USER role that can interact with this project

  moneyRequest   MoneyRequest[]
  costCategories CostCategory[]
  projectStages  ProjectStage[]
  TaxPayer       TaxPayer[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model ProjectStage {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
  createdById   String
  updatedById   String?
  startDate     DateTime
  endDate       DateTime?
  expectedFunds Decimal       @default(0) @db.Decimal(19, 4)
  donors        TaxPayer[]
  receivedFunds Imbursement[]
  Project       Project?      @relation(fields: [projectId], references: [id])
  projectId     String?
}

model CostCategory {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  createdById String
  updatedById String?
  displayName String
  currency    Currency
  balance     Decimal   @default(0) @db.Decimal(19, 4)

  projectId      String?
  Project        Project?        @relation(fields: [projectId], references: [id])
  expenseReports ExpenseReport[]
}

model Imbursement {
  id                          String    @id @default(cuid())
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime? @updatedAt
  createdById                 String
  updatedById                 String?
  concept                     String    @unique
  wasConvertedToOtherCurrency Boolean   @default(false)
  exchangeRate                Int
  otherCurrency               Currency
  amountInOtherCurrency       Decimal   @default(0) @db.Decimal(19, 4)
  finalCurrency               Currency  @default(PYG)
  finalAmount                 Decimal   @default(0) @db.Decimal(19, 4)

  archived         Boolean           @default(false)
  softDeleted      Boolean           @default(false)
  transactions     Transaction[]
  searchableImages searchableImage[]

  taxPayerId     String
  taxPayer       TaxPayer      @relation(fields: [taxPayerId], references: [id])
  ProjectStage   ProjectStage? @relation(fields: [projectStageId], references: [id])
  projectStageId String?

  MoneyAccount   MoneyAccount? @relation(fields: [moneyAccountId], references: [id])
  moneyAccountId String?
}

model TaxPayer {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  createdById   String
  updatedById   String?
  razonSocial   String          @unique
  ruc           String          @unique
  fantasyName   String?
  imbursements  Imbursement[]
  ExpenseReport ExpenseReport[]

  archived    Boolean @default(false)
  softDeleted Boolean @default(false)

  Project      Project[]
  ProjectStage ProjectStage[]
}

model MoneyRequestApproval {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  status        MoneyResquestApprovalStatus
  rejectMessage String

  accountId      String
  account        Account      @relation(fields: [accountId], references: [id])
  moneyRequestId String
  aoneyRequest   MoneyRequest @relation(fields: [moneyRequestId], references: [id])
}

model MoneyRequest {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  description      String
  status           MoneyRequestStatus
  moneyRequestType MoneyRequestType
  currency         Currency
  amountRequested  Decimal            @default(0) @db.Decimal(19, 4)
  rejectionMessage String

  accountId      String
  account        Account      @relation(fields: [accountId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  ExpenseReports        ExpenseReport[]
  moneyRequestApprovals MoneyRequestApproval[]
  transactions          Transaction[]
  ExpenseReturn         ExpenseReturn[]

  archived    Boolean @default(false)
  softDeleted Boolean @default(false)
}

model ExpenseReport {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  facturaNumber String
  facturaText   String
  amountSpent   Decimal   @default(0) @db.Decimal(19, 4)

  searchableImages searchableImage[]

  taxPayerId     String
  taxPayer       TaxPayer      @relation(fields: [taxPayerId], references: [id])
  moneyRequestId String?
  MoneyRequest   MoneyRequest? @relation(fields: [moneyRequestId], references: [id])
  CostCategory   CostCategory? @relation(fields: [costCategoryId], references: [id])
  costCategoryId String?

  @@unique([taxPayerId, facturaNumber])
}

model ExpenseReturn {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?         @updatedAt
  amountReturned   Decimal           @default(0) @db.Decimal(19, 4)
  searchableImages searchableImage[]
  moneyRequestId   String
  MoneyRequest     MoneyRequest      @relation(fields: [moneyRequestId], references: [id])
  transactions     Transaction[]
}

model Transaction {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  updatedById       String?
  currency          Currency
  openingBalance    Decimal   @default(0) @db.Decimal(19, 4)
  transactionAmount Decimal   @default(0) @db.Decimal(19, 4)

  searchableImages searchableImage[]

  moneyAccountId String
  moneyAccount   MoneyAccount @relation(fields: [moneyAccountId], references: [id])
  account        Account      @relation(fields: [accountId], references: [id])
  accountId      String

  moneyRequestId  String?
  moneyRequest    MoneyRequest?  @relation(fields: [moneyRequestId], references: [id])
  ExpenseReturn   ExpenseReturn? @relation(fields: [expenseReturnId], references: [id])
  expenseReturnId String?
  Imbursement     Imbursement?   @relation(fields: [imbursementId], references: [id])
  imbursementId   String?
}

model searchableImage {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  url       String
  text      String
  imageName String // uuid assigned from upload

  accountId String?
  accounts  Account? @relation(fields: [accountId], references: [id])

  imbursementId String?
  Imbursement   Imbursement? @relation(fields: [imbursementId], references: [id])

  expenseReportId String?
  ExpenseReport   ExpenseReport? @relation(fields: [expenseReportId], references: [id])

  expenseReturnId String?
  ExpenseReturn   ExpenseReturn? @relation(fields: [expenseReturnId], references: [id])

  transactionId Int?
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum BankAccountType {
  SAVINGS
  CURRENT
}

enum BankNamesPy {
  ITAU
  BANCO_GNB
  BANCO_CONTINENTAL
  BANCO_ATLAS
  BANCO_REGIONAL
  BANCO_FAMILIAR
  VISION_BANCO
  BANCO_NACIONAL_DE_FOMENTO
  SUDAMERIS
  BANCO_BASA
  INTERFISA_BANCO
  BANCOP
  BANCO_RIO
  CITIBANK
  BANCO_DO_BRASIL
  BANCO_DE_LA_NACION_ARGENTINA
}

enum BankDocType {
  CI
  CRC
  PASSPORT
  RUC
}

enum Currency {
  USD
  PYG
}

// depends on apporvers approval before being accepted.
enum MoneyRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MoneyRequestType {
  FUND_REQUEST
  MONEY_ORDER
  REIMBURSMENT_ORDER
}

enum MoneyResquestApprovalStatus {
  PENDING
  ACCEPTED
  REJECTED
}
